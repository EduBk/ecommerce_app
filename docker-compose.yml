services:
  nginx:
    image: nginx:latest
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - '8080:8080'
    depends_on:
      # - client
      - server

  # client:
  #   container_name: client
  #   image: client
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile.dev
  #   env_file:
  #     - ./client/.env
  #   ports:
  #     - "3000:3000"
  #   develop:
  #     watch:
  #       - action: sync
  #         path: ./client/
  #         target: /app/
  #         ignore:
  #           - node_modules/
  #       - action: rebuild
  #         path: package.json
  #   depends_on:
  #     - server

  server:
    container_name: server
    image: server
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    env_file:
      - ./server/.env
    ports:
      - '4000:4000'
    develop:
      watch:
        - action: sync
          path: ./server/
          target: /app/
          ignore:
            - node_modules/
            - prisma/migrations
        - action: rebuild
          path: package.json
    volumes:
      - ./server/prisma/migrations:/app/prisma/migrations
    depends_on:
      mysql:
        condition: service_healthy

  mysql:
    image: 'mysql:latest'
    restart: always
    ports:
      - '3306:3306'
    environment:
      - MYSQL_ROOT_PASSWORD=admin123
      - MYSQL_DATABASE=uscommerce
    volumes:
      - ./db/mysql:/var/lib/mysql
      - ./db/mysql:/var/opt/mysql/data
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10

  phpmyadmin:
    image: 'phpmyadmin:latest'
    restart: always
    ports:
      - '8181:80'
    environment:
      - MYSQL_ROOT_PASSWORD=admin123
      - PMA_ARBITRARY=1
      - PMA_HOST=mysql

      #despues de levantar el servicio docker-compose correr
      # - docker-compose exec server npx prisma migrate dev
      # - docker-compose exec server npx prisma db seed -- --environment (development / production)
